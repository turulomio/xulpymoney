#!/usr/bin/python    
# -*- coding: utf-8 -*-  
import os, adodb, datetime, sys
## 1 xulpymoney
## 2 id_inversiones
## 3 importe
## 4 valor desinversion
class Color:
    esc_seq = "\x1b["
    codes={}
    codes["reset"]     = esc_seq + "39;49;00m"
    codes["bold"]      = esc_seq + "01m"
    codes["faint"]     = esc_seq + "02m"
    codes["standout"]  = esc_seq + "03m"
    codes["underline"] = esc_seq + "04m"
    codes["blink"]     = esc_seq + "05m"
    codes["overline"]  = esc_seq + "06m"  # Who made this up? Seriously.
    codes["teal"]      = esc_seq + "36m"
    codes["turquoise"] = esc_seq + "36;01m"
    codes["fuchsia"]   = esc_seq + "35;01m"
    codes["purple"]    = esc_seq + "35m"
    codes["blue"]      = esc_seq + "34;01m"
    codes["darkblue"]  = esc_seq + "34m"
    codes["green"]     = esc_seq + "32;01m"
    codes["darkgreen"] = esc_seq + "32m"
    codes["yellow"]    = esc_seq + "33;01m"
    codes["brown"]     = esc_seq + "33m"
    codes["red"]       = esc_seq + "31;01m"
    codes["darkred"]   = esc_seq + "31m"
    
    def resetColor(self, ):
        return self.codes["reset"]
    def ctext(self, color,text):
        return self.codes[ctext]+text+self.codes["reset"]
    def bold(self, text):
        return self.codes["bold"]+text+self.codes["reset"]
    def white(self, text):
        return bold(text)
    def teal(self, text):
        return self.codes["teal"]+text+self.codes["reset"]
    def turquoise(self, text):
        return self.codes["turquoise"]+text+self.codes["reset"]
    def darkteal(self, text):
        return turquoise(text)
    def fuchsia(self, text):
        return self.codes["fuchsia"]+text+self.codes["reset"]
    def purple(self, text):
        return self.codes["purple"]+text+self.codes["reset"]
    def blue(self, text):
        return self.codes["blue"]+text+self.codes["reset"]
    def darkblue(self, text):
        return self.codes["darkblue"]+text+self.codes["reset"]
    def green(self, text):
        return self.codes["green"]+text+self.codes["reset"]
    def darkgreen(self, text):
        return self.codes["darkgreen"]+text+self.codes["reset"]
    def yellow(self, text):
        return self.codes["yellow"]+text+self.codes["reset"]
    def brown(self, text):
        return self.codes["brown"]+text+self.codes["reset"]
    def darkyellow(self, text):
        return brown(text)
    def red(self, text):
        return self.codes["red"]+text+self.codes["reset"]
    def darkred(self, text):
        return self.codes["darkred"]+text+self.codes["reset"]


def strdividendomalo():
    if dividendomalo==True:
        return " " + Color().red("Dividendo <3%")
    else:
        return ""

def strexcesocapital():
    if excesocapital==True:
        return " " + Color().fuchsia("Inversión >60.000€")
    else:
        return ""

con = adodb.NewADOConnection("postgres")
con.Connect("127.0.0.1","postgres","*", sys.argv[1])

id_inversiones=int(sys.argv[2])
desinvertir=int(sys.argv[3])
try:
    valor=float(sys.argv[4])
    strvalor=Color().green(str(valor))

except:
    valor=con.Execute("select inversion_actualizacion("+str(id_inversiones)+", date(now())) as valor").GetRowAssoc(0)['valor']
    strvalor=Color().green(str(valor)+ " (último de la base de datos)")

reg=con.Execute("select * from cuentas, inversiones, entidadesbancarias where entidadesbancarias.id_entidadesbancarias=cuentas.id_entidadesbancarias and inversiones.id_cuentas=cuentas.id_cuentas and id_inversiones="+ str(id_inversiones)).GetRowAssoc(0)


sql='select * from tmpoperinversiones where id_inversiones=' + str(id_inversiones) +' order by fecha'
op=[]
sell=[]
left=[]
operaciones=""
sumimporte=0
curs=con.Execute(sql)
while not curs.EOF:
    row = curs.GetRowAssoc(0)
    op.append(row)
    sumimporte=sumimporte+float(row['importe'])
    operaciones= operaciones + "      - " + str(row['fecha'])[:-12] +": "+ str(row['acciones']) + " acciones a " + str( row['valor_accion']) + "\n"
    curs.MoveNext()
curs.Close()


print "Realizando estudio de desinversión para " + Color().yellow(reg['inversion'])
print "   + Entidad bancaria:", Color().green(reg['entidadbancaria'])
print "   + Capital invertido:", Color().green(str(sumimporte))
print "   + Valor desinversion:", strvalor
print "   + Importe a desinvertir y se liberaría:", Color().green(str(desinvertir))
print "   + Operaciones realizadas"
print operaciones[:-1]


#Quitando capital
valorcompra=0
valorventa=0
mydesinvertir=desinvertir
addleft=False
for i in op:
    if addleft==True:
        left.append((i['fecha'],i['acciones'],i['valor_accion']))
    elif i['acciones']*valor<mydesinvertir:
        sell.append((i['acciones']))
        valorcompra=valorcompra+i['acciones']*i['valor_accion']
        mydesinvertir=mydesinvertir - i['acciones']*valor
    elif i['acciones']*valor==mydesinvertir:	
        sell.append((i['acciones']))
        valorcompra=valorcompra+i['acciones']*i['valor_accion']
        mydesinvertir=0
        addleft=True # Es como un break pero para que se aññadan a left las que quedan
    elif i['acciones']*valor>mydesinvertir:
        acciones=int(mydesinvertir/valor)
        sell.append((acciones))
        left.append((i['fecha'],i['acciones']-acciones,i['valor_accion']))
        valorcompra=valorcompra+acciones*i['valor_accion']
        mydesinvertir=0
        addleft=True


print "   + Acciones que se venderían:"
for i in sell:
    print "      - " + str(i) + " acciones a " + str(valor) 

print "   + Acciones que quedarían:"
sumleft=0
for i in left:
    print "      - " + str(i[0])[:-12] + ": " + str(i[1]) + " acciones a " + str(i[2])
    sumleft=sumleft + i[1]*i[2]

valorventa=sum(sell)*valor
print "   + Dinero que se perdería:", Color().green(str(valorcompra - valorventa))

print "   + Capital que quedaría invertido:", Color().green(str(sumleft))
sys.exit(0)
